/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.3
// source: grpc.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./grpc_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.WsmManagerClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.WsmManagerPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.WebShell,
 *   !proto.Response>}
 */
const methodDescriptor_WsmManager_CreateOrUpdateWebShell = new grpc.web.MethodDescriptor(
  '/WsmManager/CreateOrUpdateWebShell',
  grpc.web.MethodType.UNARY,
  proto.WebShell,
  proto.Response,
  /**
   * @param {!proto.WebShell} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.WebShell} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.WsmManagerClient.prototype.createOrUpdateWebShell =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/WsmManager/CreateOrUpdateWebShell',
      request,
      metadata || {},
      methodDescriptor_WsmManager_CreateOrUpdateWebShell,
      callback);
};


/**
 * @param {!proto.WebShell} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.WsmManagerPromiseClient.prototype.createOrUpdateWebShell =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/WsmManager/CreateOrUpdateWebShell',
      request,
      metadata || {},
      methodDescriptor_WsmManager_CreateOrUpdateWebShell);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.EmptyRequest,
 *   !proto.Response>}
 */
const methodDescriptor_WsmManager_DeleteWebShell = new grpc.web.MethodDescriptor(
  '/WsmManager/DeleteWebShell',
  grpc.web.MethodType.UNARY,
  proto.EmptyRequest,
  proto.Response,
  /**
   * @param {!proto.EmptyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.WsmManagerClient.prototype.deleteWebShell =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/WsmManager/DeleteWebShell',
      request,
      metadata || {},
      methodDescriptor_WsmManager_DeleteWebShell,
      callback);
};


/**
 * @param {!proto.EmptyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.WsmManagerPromiseClient.prototype.deleteWebShell =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/WsmManager/DeleteWebShell',
      request,
      metadata || {},
      methodDescriptor_WsmManager_DeleteWebShell);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.QueryRequest,
 *   !proto.Response>}
 */
const methodDescriptor_WsmManager_SelectWebShell = new grpc.web.MethodDescriptor(
  '/WsmManager/SelectWebShell',
  grpc.web.MethodType.UNARY,
  proto.QueryRequest,
  proto.Response,
  /**
   * @param {!proto.QueryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.QueryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.WsmManagerClient.prototype.selectWebShell =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/WsmManager/SelectWebShell',
      request,
      metadata || {},
      methodDescriptor_WsmManager_SelectWebShell,
      callback);
};


/**
 * @param {!proto.QueryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.WsmManagerPromiseClient.prototype.selectWebShell =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/WsmManager/SelectWebShell',
      request,
      metadata || {},
      methodDescriptor_WsmManager_SelectWebShell);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.QueryRequest,
 *   !proto.Response>}
 */
const methodDescriptor_WsmManager_CheckAlive = new grpc.web.MethodDescriptor(
  '/WsmManager/CheckAlive',
  grpc.web.MethodType.UNARY,
  proto.QueryRequest,
  proto.Response,
  /**
   * @param {!proto.QueryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.QueryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.WsmManagerClient.prototype.checkAlive =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/WsmManager/CheckAlive',
      request,
      metadata || {},
      methodDescriptor_WsmManager_CheckAlive,
      callback);
};


/**
 * @param {!proto.QueryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.WsmManagerPromiseClient.prototype.checkAlive =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/WsmManager/CheckAlive',
      request,
      metadata || {},
      methodDescriptor_WsmManager_CheckAlive);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.WebRequest,
 *   !proto.WebResponse>}
 */
const methodDescriptor_WsmManager_RequestUrl = new grpc.web.MethodDescriptor(
  '/WsmManager/RequestUrl',
  grpc.web.MethodType.UNARY,
  proto.WebRequest,
  proto.WebResponse,
  /**
   * @param {!proto.WebRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.WebResponse.deserializeBinary
);


/**
 * @param {!proto.WebRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.WebResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.WebResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.WsmManagerClient.prototype.requestUrl =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/WsmManager/RequestUrl',
      request,
      metadata || {},
      methodDescriptor_WsmManager_RequestUrl,
      callback);
};


/**
 * @param {!proto.WebRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.WebResponse>}
 *     Promise that resolves to the response
 */
proto.WsmManagerPromiseClient.prototype.requestUrl =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/WsmManager/RequestUrl',
      request,
      metadata || {},
      methodDescriptor_WsmManager_RequestUrl);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.GlobalConfig,
 *   !proto.Response>}
 */
const methodDescriptor_WsmManager_UpdateGlobal = new grpc.web.MethodDescriptor(
  '/WsmManager/UpdateGlobal',
  grpc.web.MethodType.UNARY,
  proto.GlobalConfig,
  proto.Response,
  /**
   * @param {!proto.GlobalConfig} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Response.deserializeBinary
);


/**
 * @param {!proto.GlobalConfig} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Response)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Response>|undefined}
 *     The XHR Node Readable Stream
 */
proto.WsmManagerClient.prototype.updateGlobal =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/WsmManager/UpdateGlobal',
      request,
      metadata || {},
      methodDescriptor_WsmManager_UpdateGlobal,
      callback);
};


/**
 * @param {!proto.GlobalConfig} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Response>}
 *     Promise that resolves to the response
 */
proto.WsmManagerPromiseClient.prototype.updateGlobal =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/WsmManager/UpdateGlobal',
      request,
      metadata || {},
      methodDescriptor_WsmManager_UpdateGlobal);
};


module.exports = proto;

